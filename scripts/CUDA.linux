#CUDA COMPILE configuration

HOST_COMPILER ?= g++

# architecture
HOST_ARCH   := $(shell uname -m)
TARGET_ARCH ?= $(HOST_ARCH)
ifneq (,$(filter $(TARGET_ARCH),x86_64 aarch64 ppc64le))
    TARGET_SIZE := 64
else ifeq ($(TARGET_ARCH),armv7l)
    TARGET_SIZE := 32
else
    $(error ERROR - unsupported value $(TARGET_ARCH) for TARGET_ARCH!)
endif
ifneq ($(TARGET_ARCH),$(HOST_ARCH))
    ifeq (,$(filter $(HOST_ARCH)-$(TARGET_ARCH),aarch64-armv7l x86_64-armv7l x86_64-aarch64 x86_64-ppc64le))
        $(error ERROR - cross compiling from $(HOST_ARCH) to $(TARGET_ARCH) is not supported!)
    endif
endif


CU_FILES	?= $(shell find $(SRC_PATH) -name \*.cu)
CUH_FILES	?= $(shell find $(SRC_PATH) -name \*.cuh)

CUDA_FILE_OBJ   += $(patsubst ./%.cu,%.cuda.o,$(CU_FILES))
CUDA_BUILD_OBJ	?= $(foreach n,$(CUDA_FILE_OBJ) ,$(BUILD_PATH)/$(n))
OBJ_FILES_BUILD += $(CUDA_BUILD_OBJ)


# Gencode arguments
SMS ?= 20 30 35 37 50 52

ifeq ($(SMS),)
$(info >>> WARNING - no SM architectures have been specified - waiving sample <<<)
SAMPLE_ENABLED := 0
endif

ifeq ($(GENCODE_FLAGS),)
# Generate SASS code for each SM architecture listed in $(SMS)
$(foreach sm,$(SMS),$(eval GENCODE_FLAGS += -gencode arch=compute_$(sm),code=sm_$(sm)))

# Generate PTX code from the highest SM architecture in $(SMS) to guarantee forward-compatibility
HIGHEST_SM := $(lastword $(sort $(SMS)))
ifneq ($(HIGHEST_SM),)
GENCODE_FLAGS += -gencode arch=compute_$(HIGHEST_SM),code=compute_$(HIGHEST_SM)
endif
endif

NVCC          	:= $(CUDA_PATH)/bin/nvcc -ccbin $(HOST_COMPILER)

COMPILEFLAGS	+= -I$(CUDA_PATH)/include -DHAS_CUDA
LINKFLAGS	+= -Wl,-rpath=$(CUDA_PATH)/lib${TARGET_SIZE} -L$(CUDA_PATH)/lib${TARGET_SIZE} -lcudart

CUDAFLAGS	+= -arch sm_35 -c -Xptxas -v -Xcompiler -m${TARGET_SIZE},-pipe -DHAS_CUDA -I$(CUDA_PATH)/include

ifeq "$(MAKE_TYPE)" "shared"
CUDAFLAGS	+= -Xcompiler -fPIC -shared
endif

CUDAFLAGS    	+= $(foreach n,$(MODULES),$($(n)_CFLAGS))
CUDAFLAGS   	+= $(foreach n,$(INCLUDE_PATH),-I$(n))
CUDAFLAGS	+= $(foreach n,$(DEFINES),-D$($(n)))

